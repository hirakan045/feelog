openapi: 3.0.4
info:
  title: Feelog API - OpenAPI 3.0
  description: |
    Feelogはユーザーの感情と日記を記録・可視化するメンタルヘルスケアアプリです。
  version: 0.1.0

tags:
  - name: auth
    description: ログイン、ログアウト、トークン処理などの認証を行います。
  - name: users
    description: 認証後に使用するユーザー情報の取得、更新を行います。
  - name: chats
    description: AIとの対話内容を記録し、過去の対話履歴を取得する機能を提供します。
  - name: diaries
    description: ユーザーの日記データの作成、更新、削除、取得を行います。
  - name: feels
    description: ユーザーの感情レベル（1〜5段階）の記録と履歴取得を行います。
  - name: settings
    description: Feelogアプリのユーザー個別設定（例：テーマカラー）の取得・更新を行います。

paths:
  /auth/login:
    post:
      tags: [auth]
      summary: ログイン処理
      description: Google認証後に、アプリ用のJWTトークンを発行します。
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Googleのid_token
      responses:
        "200":
          description: JWTトークンを返却
        "400":
          description: 不正なリクエスト
        "500":
          description: サーバー内部エラー

  /auth/logout:
    post:
      tags: [auth]
      summary: ログアウト処理
      description: サーバー側でセッションを無効化します。
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: ログアウト成功
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

  /users:
    get:
      tags: [users]
      summary: ログイン中のユーザー情報取得
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: ユーザー情報
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    put:
      tags: [users]
      summary: プロフィール情報更新
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
      responses:
        "200":
          description: 更新成功
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

  /chats:
    get:
      tags: [chats]
      summary: AIとの対話履歴の取得
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 対話履歴リスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    post:
      tags: [chats]
      summary: AIとの対話内容を記録
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Chat" }
      responses:
        "201":
          description: 対話内容を記録
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

  /diaries:
    get:
      tags: [diaries]
      summary: 日記の取得
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 日記リスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    post:
      tags: [diaries]
      summary: 日記の作成
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Diary" }
      responses:
        "201":
          description: 日記を作成
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    put:
      tags: [diaries]
      summary: 日記の更新
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Diary" }
      responses:
        "200":
          description: 日記を更新
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    delete:
      tags: [diaries]
      summary: 日記の削除
      security: [{ bearerAuth: [] }]
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 日記を削除
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

  /feels:
    get:
      tags: [feels]
      summary: 感情履歴の取得
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 感情レベル履歴
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    post:
      tags: [feels]
      summary: 感情レベルの記録
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Feel" }
      responses:
        "201":
          description: 感情を記録
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

  /settings:
    get:
      tags: [settings]
      summary: ユーザー設定の取得
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 設定情報
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

    put:
      tags: [settings]
      summary: ユーザー設定の更新
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Setting" }
      responses:
        "200":
          description: 設定を更新
        "400":
          description: 不正なリクエスト
        "401":
          description: 認証エラー
        "500":
          description: サーバー内部エラー

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string }
    Chat:
      type: object
      properties:
        date: { type: string }
        branch: { type: integer }
        content: { type: string }
        ai: { type: boolean }
    Diary:
      type: object
      properties:
        date: { type: string }
        content: { type: string }
    Feel:
      type: object
      properties:
        date: { type: string }
        level: { type: integer }
    Setting:
      type: object
      properties:
        themeColor: { type: string }
